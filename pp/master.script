local protofile = [[syntax = "proto3";

package planetary;

message Init {
	uint64 GameID = 1;
	string PlayerID = 2;
}

message WrappedPacket {
	bytes Packet = 1;
	Init Init= 2;
}

message Position {
	double X = 1;
	double Y = 2;
	double Z = 3;
}

message UpdateEntity {
	string EntityID = 1;
	double X = 2;
	double Y = 3;
	double Z = 4;
	string Data = 5;
	string Type = 6;
}

message DeleteEntity {
	string EntityID = 1;
}

message ChunkUpdate {
	uint64 ID = 1;
	string Data = 2;
	int64 X = 3;
	int64 Y = 4;
}

message Packet {
	Position Join = 1; // client side to join at location
	UpdateEntity Update = 2; // server side
	DeleteEntity Delete = 3; // server side
	bool Leave = 4; // client side or server side (forces disconnect if sent serverside)
	string Arbitrary = 5; // client side
	string Event = 6; // server side
	ChunkUpdate Chunk = 7; // server side
}

message Login {
	string Token = 1;
	uint64 GameID = 2;
	string UUID = 3;
	// optionally use these instead of token
	string Username = 4;
	string Password = 5;
}
]]

pb = pb
local socket = require("socket")
local base64 = require("pp.base64")
local json = require("pp.json")
local protoc = require("pb.protoc")
protoc:load(protofile)

go.property("player_url", hash("/player"))
go.property("gameid", 0)
go.property("chunk_size", 64)

local chunksActive = true

-- send pp_init to this script to authenticate and connect to the server
-- the sender of pp_init will receive connection status message (see below)
local PP_INIT = hash("pp_init")
-- send pp_join to this script to join the game
local PP_JOIN = hash("pp_join")
-- send pp_message to this script to send a custom message to the server
local PP_MESSAGE = hash("pp_message")
-- send pp_leave to this script to terminate the connection
local PP_DISCONNECT = hash("pp_disconnect")

-- change the player url
local PP_CHANGE_PLAYER_URL = hash("pp_change_player_url")

-- sent to the listener when an entity is updated
local PP_UPDATE = hash("pp_update")
-- sent to the listener when an entity is spawned
local PP_SPAWN = hash("pp_spawn")
-- sent to the listener when an entity is deleted
local PP_DELETE = hash("pp_delete")

-- sent to the listener when connected to the server
local PP_CONNECTED = hash("pp_connected")
-- sent to the listener when disconnected from the server
local PP_DISCONNECTED = hash("pp_disconnected")
-- sent to the listener when there was a problem connecting to the server
local PP_CONNECTION_ERROR = hash("pp_connection_error")
-- sent to the listener when there was a problem authenticating with the server
local PP_AUTHENTICATION_ERROR = hash("pp_authentication_error")

local function handle(self, packet)
	for k, e in pairs(packet) do
		if k == "Update" then
			-- create entity message
			local message = {uuid=e.EntityID, x=e.X, y=e.Y, z=e.Z, type=e.Type, data=json.decode(e.Data)}

			-- is this a new entity?
			if not self.entities[e.EntityID] then
				if self.uuid == e.EntityID then
					self.entities[e.EntityID] = self.player_url
				else
					local ok, res = pcall(factory.create, "#"..e.Type.."factory", vmath.vector3(e.X, e.Y, e.Z))
					if ok then self.entities[e.EntityID] = res else print(res) end
				end
				-- send a pp_spawn message to the listener
				message.id = self.entities[e.EntityID]
				msg.post(self.listener_url, PP_SPAWN, message)
			end

			-- send a pp_update message to the entity
			msg.post(self.entities[e.EntityID], PP_UPDATE, message)

			-- send a pp_update message to the listener
			message.id = self.entities[e.EntityID]
			msg.post(self.listener_url, PP_UPDATE, message)
		elseif k == "Delete" and self.entities[e.EntityID] then
			-- send a pp_delete message to the listener
			local message = {id = self.entities[e.EntityID], uuid=e.EntityID}
			msg.post(self.listener_url, PP_DELETE, message)

			-- delete the entity, unless it is the connected client
			if self.uuid ~= e.EntityID then go.delete(self.entities[e.EntityID]) end
			self.entities[e.EntityID] = nil

		elseif k == "Chunk" and chunksActive then
			local message = {uuid=e.ID, x=e.X, y=e.Y, z=e.Z, type=e.Type, data=json.decode(e.Data)}

			if not self.chunks[e.ID] then
				if self.uuid == e.ID then
					self.chunks[e.ID] = self.player_url
				else	
					print("Spawning chunk at",e.X, e.Y, "0")
					--TODO multiply by var chunk size
					local ok, res = pcall(factory.create, "#chunkfactory", vmath.vector3(e.X * self.chunk_size , e.Y *  self.chunk_size, 0))
					if ok then self.chunks[e.ID] = res else 
						print(res) 
						print("Chunk storage (optional) has not been implemented on this project.")
						chunksActive = false
					end
				end
				-- send a pp_spawn message to the listener
				message.id = self.chunks[e.ID]
				msg.post(self.listener_url, PP_SPAWN, message)
			end
			if chunksActive  then
				-- send a pp_update message to the entity
				msg.post(self.chunks[e.ID], PP_UPDATE, message)

				-- send a pp_update message to the listener
				message.id = self.chunks[e.ID]
				msg.post(self.listener_url, PP_UPDATE, message)

				--TODO cull chunks more than 3 away from this chunk
				-- Cull chunks that are more than 3 away in X or Y
				for chunkID, chunkInstance in pairs(self.chunks) do
					local chunkPos = go.get_position(chunkInstance)  -- Get chunk's position
					local chunkX, chunkY = chunkPos.x /  self.chunk_size, chunkPos.y /  self.chunk_size  -- Convert back to chunk coordinates

					-- If chunk is more than 3 units away, remove it
					if math.abs(chunkX - e.X) > 3 or math.abs(chunkY - e.Y) > 3 then
						print("Removing distant chunk at", chunkX, chunkY)

						msg.post(self.listener_url, PP_DELETE, message)
						go.delete(chunkInstance)  
						self.chunks[chunkID] = nil  
					end

				end
			end
		end
	end

end

local function make_callback(login)
	return function (self, conn, data)
		if data.event == websocket.EVENT_DISCONNECTED then
			msg.post(self.listener_url, PP_DISCONNECTED, { error = data.message })
			self.connected = false
		elseif data.event == websocket.EVENT_CONNECTED then
			self.connected = true
			local data = pb.encode("planetary.Login", login)
			websocket.send(self.connection, data)
			msg.post(self.listener_url, PP_CONNECTED, { error = data.message })
		elseif data.event == websocket.EVENT_ERROR then
			print(data.message)
			msg.post(self.listener_url, PP_CONNECTION_ERROR, { error = data.message })
		elseif data.event == websocket.EVENT_MESSAGE then
			if self.uuid == nil then
				local pckt = pb.decode("planetary.Login", data.message)
				self.uuid = pckt.UUID
			else
				local pckt = pb.decode("planetary.Packet", base64.decode(data.message))
				handle(self, pckt)
			end
		else
			print("HI!")
		end
	end
end

function fixed_update(self, dt)
end

local function connect(self, un, pw)
	local current_time = socket.gettime()
	self.url = "wss://planetaryprocessing.io/_ws"
	local params = {
		headers="Origin: https://planetaryprocessing.io\r\n",
		timeout=3600000,
		type = websocket.DATA_TYPE_TEXT,
	}
	self.connection = websocket.connect(self.url, params, make_callback({GameID=self.gameid, Username=un, Password=pw}))
end

local function auth(self, un, pw)
	connect(self, un, pw)
end

function init(self)
end

function final(self)
	if self.connection ~= nil then
		websocket.disconnect(self.connection)
	end
end

function on_message(self, message_id, message, sender)
	local current_time = socket.gettime()
	if message_id == PP_INIT then
		self.listener_url = sender
		self.entities = {}
		self.chunks = {}
		self.buf = ""
		auth(self, message.username or "", message.password or "")
	elseif message_id == PP_JOIN and self.connected then 
		local d = websocket.send(self.connection, base64.encode(pb.encode("planetary.Packet", {Join={}})))
	elseif message_id == PP_MESSAGE and self.connected then
		local d = websocket.send(self.connection, base64.encode(pb.encode("planetary.Packet", {Arbitrary=json.encode(message)})))
	elseif message_id == PP_DISCONNECT then
		for eID,eURL in pairs(self.entities) do
			if self.uuid ~= eID then go.delete(eURL) end
		end
		for eID,eURL in pairs(self.chunks) do
			if self.uuid ~= eID then go.delete(eURL) end
		end
		self.connected = false
		--websocket.disconnect(self.connection)
		msg.post(self.listener_url, PP_DISCONNECTED, { message = "pp_disconnect received" })
	elseif message_id == PP_CHANGE_PLAYER_URL then
		self.player_url = msg.url(message.player_url)
	end
end